package copybook

import (
	"bytes"
	"io"
	"io/ioutil"
	"strings"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/pgmitche/go-pic/cmd/pkg/template"
	"github.com/pgmitche/go-pic/pkg/lex"
)

func Test_Build(t *testing.T) {
	tests := []struct {
		name  string
		input io.Reader
	}{
		{
			name: "Go",
			input: strings.NewReader(`000160     05  DUMMY-GROUP-1.                                           00000115
000170         10  DUMMY-SUB-GROUP-1.                                00000116
000180             15  DUMMY-GROUP-1-OBJECT-A   PIC 9.               00000117
000190             15  DUMMY-GROUP-1-OBJECT-B   PIC X.               00000118
000200             15  DUMMY-GROUP-1-OBJECT-C   PIC 9.               00000119
`),
		},
	}

	for _, test := range tests {
		tt := test
		t.Run(tt.name, func(t *testing.T) {
			c := New(tt.name, template.Copybook())

			b, err := ioutil.ReadAll(tt.input)
			require.NoError(t, err)

			lxr := lex.New("go-pic", string(b))
			tree := lex.NewTree(lxr)
			c.Root = tree.Parse()

			var buf bytes.Buffer
			c.WriteToStruct(&buf)

			require.NotEmpty(t, buf)
		})
	}
}

// Currently printing
//
//   ////////////////////////////////
//   //     AUTOGENERATED FILE     //
//   // File generated with go-pic //
//   ////////////////////////////////
//
//   // nolint
//   package copygen
//
//   // CopybookGo contains a representation of your provided Copybook
//   type root struct {
//
//   	type DUMMYGROUP1 struct {
//
//
//   	type DUMMYSUBGROUP1 struct {
//
//
//   	DUMMYGROUP1OBJECTA uint `pic:"1"` // start:1 end:1
//
//
//   	DUMMYGROUP1OBJECTB string `pic:"1"` // start:2 end:2
//
//
//   	DUMMYGROUP1OBJECTC uint `pic:"1"` // start:3 end:3
//
//   }
//
//   }
//
// }
//
// Where I'd like to print
//
//   ////////////////////////////////
//   //     AUTOGENERATED FILE     //
//   // File generated with go-pic //
//   ////////////////////////////////
//
//   // nolint
//   package copygen
//
//   // CopybookGo contains a representation of your provided Copybook
//   type root struct {
//   	dummyGroup1 dummyGroup1
//   }
//
//   type dummyGroup1 struct {
//        dummySubGroup1 dummySubGroup1
//   }
//
//   type dummySubGroup1 struct {
//   	DUMMYGROUP1OBJECTA uint `pic:"1"` // start:1 end:1
//   	DUMMYGROUP1OBJECTB string `pic:"1"` // start:2 end:2
//   	DUMMYGROUP1OBJECTC uint `pic:"1"` // start:3 end:3
//   }
//
// To to determine how to print outside of the original range when
// structs are defined/created
