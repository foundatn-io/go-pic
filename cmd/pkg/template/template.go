package template

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"text/template"

	"github.com/pgmitche/go-pic/pkg/lex"
)

var (
	startPos = 1
	endPos   = 1
	structs  = make([]string, 0)

	special = regexp.MustCompile("[^a-zA-Z0-9]+")
)

func getTemplateFuncs() template.FuncMap {
	return template.FuncMap{
		"goType":       goType,
		"picTag":       picTag,
		"sanitiseName": sanitiseName,
		"indexComment": indexComment,
		"isStruct":     isStruct,
		"buildStruct":  buildStruct,
		"getStructs":   getStructs,
	}
}

func getTemplate() *template.Template {
	return template.Must(
		template.New("root").
			Funcs(getTemplateFuncs()).
			Parse(`
////////////////////////////////
//     AUTOGENERATED FILE     //
// File generated with go-pic //
////////////////////////////////

// nolint
package copygen

// Copybook{{.Name}} contains a representation of your provided Copybook
type {{ .Root.Name }} struct {
	{{- range $element := .Root.Children}}
		{{- if isStruct $element }}
			{{- sanitiseName $element.Name }} {{ goType $element }}
            {{- buildStruct $element }} 
		{{ else }}
			{{ sanitiseName $element.Name }} {{ goType $element }} {{ picTag $element.Length $element.Occurs}}{{ indexComment $element.Length $element.Occurs -}} 
		{{- end }}
	{{- end }}
}

{{- range $elem := getStructs }}
	{{ $elem }}
{{- end }}
`))
}

func Copybook() *template.Template {
	startPos = 1
	endPos = 1

	return getTemplate()
}

// goType translates a type into a go type
func goType(l *lex.Record) string {
	tag := ""
	switch l.Typ {
	case reflect.String:
		tag = "string"
	case reflect.Int:
		tag = "int"
	case reflect.Uint:
		tag = "uint"
	case reflect.Float64:
		tag = "float64"
	case reflect.Struct:
		tag = sanitiseName(l.Name)
	default:
		panic(fmt.Sprintf("unrecognized type %v", l.Typ))
	}

	if l.Occurs > 0 {
		tag = fmt.Sprintf("[]%s", tag)
	}

	return tag
}

func picTag(l int, i int) string {
	if i > 0 {
		return "`" + fmt.Sprintf("pic:\"%d,%d\"", l, i) + "`"
	}
	return "`" + fmt.Sprintf("pic:\"%d\"", l) + "`"
}

func indexComment(l int, i int) string {
	size := l
	if i > 0 {
		size *= i
	}

	s := startPos
	endPos += size
	startPos = endPos
	return fmt.Sprintf(" // start:%d end:%d", s, endPos-1)
}

func sanitiseName(s string) string {
	return special.ReplaceAllString(s, "")
}

func isStruct(r *lex.Record) bool {
	return r.Typ == reflect.Struct
}

func getStructs() []string {
	return structs
}

func getStructTemplate() *template.Template {
	t, err := template.New("struct").
		Funcs(getTemplateFuncs()).
		Parse(`
type {{ sanitiseName .Name }} struct {
	{{- range $element := .Children}}
		{{- if isStruct $element }}
			{{ sanitiseName $element.Name }} {{ goType $element -}}
            {{ buildStruct $element -}} 
		{{ else }}
			{{ sanitiseName $element.Name }} {{ goType $element }} {{ picTag $element.Length $element.Occurs}}{{ indexComment $element.Length $element.Occurs -}}
		{{- end }}
	{{- end }}
}`)
	if err != nil {
		panic(err)
	}

	return t
}

func buildStruct(r *lex.Record) string {
	b := bytes.Buffer{}
	if err := getStructTemplate().Execute(&b, r); err != nil {
		panic(err)
	}

	structs = append(structs, b.String())
	return ""
}
